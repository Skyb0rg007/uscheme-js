{"version":3,"sources":["react-console-emulator/defs/styles/TerminalMessage.js","react-console-emulator/defs/types/TerminalMessage.js","react-console-emulator/TerminalMessage.jsx","react-console-emulator/utils/sendCursorToEnd.js","react-console-emulator/handlers/scrollHistory.js","react-console-emulator/utils/cleanArray.js","react-console-emulator/defs/styles/Terminal.js","react-console-emulator/defs/types/Terminal.js","react-console-emulator/Terminal.jsx","react-console-emulator/handlers/parseEOL.js","contexts/Interpreter.js","components/Repl.js","components/uscheme-mode.js","components/Editor.js","App.js","index.js"],"names":["PropTypes","node","object","string","bool","lineHeight","TerminalMessage","this","props","content","style","className","styles","message","defaults","sourceStyles","dangerMode","html","Component","inputElement","cursorStart","selectionStart","cursorEnd","selectionEnd","setTimeout","setSelectionRange","direction","options","dirtyArray","history","historyPosition","previousHistoryPosition","terminalInput","commandHistory","Array","from","filter","i","undefined","reverse","position","previousPosition","terminal","current","length","latest","first","next","value","sendCursorToEnd","minHeight","maxWidth","maxHeight","borderRadius","overflow","cursor","backgroundColor","backgroundSize","padding","height","fontSize","color","fontFamily","display","width","paddingTop","border","margin","flexGrow","background","outline","styleTypes","contentStyle","inputAreaStyle","promptLabelStyle","inputStyle","classNameTypes","contentClassName","inputAreaClassName","promptLabelClassName","inputClassName","optionTypes","autoFocus","disabled","disableOnProcess","ignoreCommandCase","noDefaults","noEchoBack","noHistory","noAutoScroll","noNewlineParsing","labelTypes","welcomeMessage","oneOfType","arrayOf","promptLabel","errorText","commandTypes","runCommand","func","isRequired","messageTypes","messageStyle","messageClassName","Terminal","focusTerminal","window","getSelection","type","focus","scrollToBottom","rootNode","terminalRoot","scrollTop","scrollHeight","showWelcomeMessage","msg","pushToStdout","stdout","state","push","isEcho","rawInput","pushToHistory","setState","getStdout","parsedStdout","currentLine","messageText","innerText","parsed","test","split","line","parseEOL","map","key","clearStdout","clearInput","processCommand","processing","echo","res","scrollHistory","toUpdate","handleInput","event","ctrlKey","keyCode","preventDefault","React","createRef","container","inputArea","input","ref","name","onClick","onKeyDown","autoComplete","createContext","eval","str","console","log","reset","Repl","forwardRef","_","interp","useContext","InterpContext","CodeMirror","defineMode","makeKeywords","obj","words","keywords","indentKeys","stateStack","indent","prev","pushStack","indentStack","binaryMatcher","RegExp","octalMatcher","hexMatcher","decimalMatcher","isBinaryNumber","stream","match","isOctalNumber","isDecimalNumber","backup","backUp","isHexNumber","startState","indentation","mode","sExprComment","sExprQuote","token","sol","eatSpace","returnType","escaped","maybeEnd","peek","eatWhile","ch","eat","numTest","hasExactness","hasRadix","skipToEnd","letter","keyWord","indentTemp","column","propertyIsEnumerable","eol","popStack","closeBrackets","pairs","lineComment","Editor","valRef","useState","setValue","useEffect","instance","setInstance","addKeyMap","cm","toggleComment","onBeforeChange","editor","data","theme","smartIndent","lineNumbers","matchBrackets","autoCloseBrackets","editorDidMount","uscheme","make_interp","interpEval","setInterpEval","replRef","useRef","editorRef","forEach","newEval","Fragment","Navbar","bg","expand","Brand","Nav","Container","Link","href","onSelect","Provider","Row","Col","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.44420bdf.chunk.js","sourcesContent":["export default {\n  lineHeight: '21px'\n}\n","import PropTypes from 'prop-types'\n\nexport default {\n  content: PropTypes.node,\n  style: PropTypes.object,\n  className: PropTypes.string,\n  dangerMode: PropTypes.bool\n}\n","import React, { Component } from 'react'\nimport html from 'react-inner-html'\nimport defaults from 'defaults'\n\nimport types from './defs/types/TerminalMessage'\nimport sourceStyles from './defs/styles/TerminalMessage'\n\nexport default class TerminalMessage extends Component {\n  static propTypes = types\n\n  render () {\n    const { content, style, className } = this.props\n\n    const styles = {\n      message: defaults(style, sourceStyles)\n    }\n\n    return this.props.dangerMode\n      ? <div className={className} style={styles.message} {...html(content)}/>\n      : <div className={className} style={styles.message}>{content}</div>\n  }\n}\n","export default inputElement => {\n  if (inputElement) {\n    const cursorStart = inputElement.selectionStart\n    const cursorEnd = inputElement.selectionEnd\n\n    // Decouple execution for 2 ms (1 doesn't work for... Reasons) in order to properly send cursor to end\n    setTimeout(() => inputElement.setSelectionRange(cursorStart, cursorEnd), 10)\n  }\n}\n","/* eslint-disable */\nimport cleanArray from '../utils/cleanArray'\nimport sendCursorToEnd from '../utils/sendCursorToEnd'\n\n/**\n * Scrolls command history in a given direction\n * @param {String} direction Direction to scroll in ('up' or 'down')\n * @param {Object} options\n * @param {Array} options.history - Array of previous inputs from the user\n * @param {Number} options.historyPosition - Current position in the history\n * @param {Number} options.previousHistoryPosition - Previous position in the history\n * @param {React.Ref} options.terminalInput - Ref to the terminal input element\n */\nexport default (direction, options) => {\n  const { history, historyPosition, previousHistoryPosition, terminalInput } = options\n\n  // BUG: I have to duplicate sendCursorToEnd for each condition, because doing so in a catch-all manner doesn't seem to work at all\n\n  // Clean potential empty items and reverse order to ease position tracking\n  // (Reverse = starting from the newest first when going up and vice versa)\n  const commandHistory = cleanArray(history).reverse()\n  const position = historyPosition\n  const previousPosition = previousHistoryPosition\n  const terminal = terminalInput.current\n\n  if (commandHistory.length > 0) { // Only run if history is non-empty and in use\n    switch (direction) {\n      case 'up': {\n        // Declaring variables for these here to better clarify this block which can get pretty convoluted\n        const latest = commandHistory[0]\n        const first = commandHistory[commandHistory.length - 1]\n        const next = commandHistory[position + 1]\n\n        if (position === null) {\n          // If at no yet defined position, get most recent entry\n          terminal.value = latest\n          sendCursorToEnd(terminal)\n\n          return {\n            historyPosition: 0,\n            previousHistoryPosition: null\n          }\n        } else if (position + 1 === commandHistory.length) {\n          // If the first entry will be reached on this press, get it and decrement position by 1 to avoid confusing downscroll\n          // EXCEPT: If there is only 1 unit in the history, our previous position was actually null, not zero as defined above\n          // Hence why in one-unit histories the previous position has to be set to null, not 0\n          terminal.value = first\n          sendCursorToEnd(terminal)\n\n          return {\n            historyPosition: commandHistory.length - 1,\n            previousHistoryPosition: commandHistory.length === 1 ? null : commandHistory.length - 2\n          }\n        } else {\n          // Normal increment by one\n          terminal.value = next\n          sendCursorToEnd(terminal)\n\n          return {\n            historyPosition: position + 1,\n            previousHistoryPosition: position\n          }\n        }\n      }\n      case 'down': {\n        // Declaring variables for these here to better clarify this block which can get pretty convoluted\n        const latest = commandHistory[0]\n        const empty = ''\n        const next = commandHistory[position - 1]\n\n        if (position === null || !commandHistory[position]) {\n          // If at initial or out of range, clear (Unix-like behaviour)\n          terminal.value = empty\n          sendCursorToEnd(terminal)\n\n          return {\n            historyPosition: null,\n            previousHistoryPosition: null\n          }\n        } else if (position - 1 === -1) {\n          // Clear because user is either pressing up once and is now pressing down again, or is reaching the latest entry\n          if (previousPosition === null || (position === 0 && previousPosition === 1)) terminal.value = empty\n          else terminal.value = latest\n          sendCursorToEnd(terminal)\n\n          return {\n            historyPosition: null,\n            previousHistoryPosition: null\n          }\n        } else {\n          // Normal decrement by one\n          terminal.value = next\n          sendCursorToEnd(terminal)\n\n          return {\n            historyPosition: position - 1,\n            previousHistoryPosition: position\n          }\n        }\n      }\n    }\n  }\n}\n","/**\n * Workaround to clean an array from 'ghost items'.\n * @param {Array} dirtyArray\n */\nexport default function cleanArray (dirtyArray) {\n  const newArray = Array.from(dirtyArray)\n  return newArray.filter(i => i !== undefined)\n}\n","\nexport default {\n  container: {\n    minHeight: '300px',\n    maxWidth: '100%', // Fill parent before overflowing\n    maxHeight: '100%', // Fill parent before overflowing\n    borderRadius: '5px',\n    overflow: 'auto',\n    cursor: 'text',\n    backgroundColor: '#212121',\n    backgroundSize: 'cover'\n  },\n  content: {\n    padding: '20px',\n    height: '100%',\n    fontSize: '15px',\n    color: '#FFFFFF',\n    fontFamily: 'monospace'\n  },\n  inputArea: {\n    display: 'inline-flex',\n    width: '100%'\n  },\n  promptLabel: {\n    paddingTop: '3px',\n    color: '#EE9C34'\n  },\n  input: {\n    border: '0',\n    padding: '0 0 0 7px',\n    margin: '0',\n    flexGrow: '100',\n    width: '100%',\n    height: '22px',\n    background: 'transparent',\n    fontSize: '15px',\n    color: '#F0BF81',\n    fontFamily: 'monospace',\n    outline: 'none' // Fix for outline showing up on some browsers\n  }\n}\n","import PropTypes from 'prop-types'\n\nconst styleTypes = {\n  style: PropTypes.object,\n  contentStyle: PropTypes.object,\n  inputAreaStyle: PropTypes.object,\n  promptLabelStyle: PropTypes.object,\n  inputStyle: PropTypes.object\n}\n\nconst classNameTypes = {\n  className: PropTypes.string,\n  contentClassName: PropTypes.string,\n  inputAreaClassName: PropTypes.string,\n  promptLabelClassName: PropTypes.string,\n  inputClassName: PropTypes.string\n}\n\nconst optionTypes = {\n  autoFocus: PropTypes.bool,\n  dangerMode: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disableOnProcess: PropTypes.bool,\n  ignoreCommandCase: PropTypes.bool,\n  noDefaults: PropTypes.bool,\n  noEchoBack: PropTypes.bool,\n  noHistory: PropTypes.bool,\n  noAutoScroll: PropTypes.bool,\n  noNewlineParsing: PropTypes.bool\n}\n\nconst labelTypes = {\n  welcomeMessage: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.string\n  ]),\n  promptLabel: PropTypes.node,\n  errorText: PropTypes.string\n}\n\nconst commandTypes = {\n  // commands: PropTypes.object.isRequired, // Cannot validate beyond this because names are dynamic\n  // commandCallback: PropTypes.func\n  runCommand: PropTypes.func.isRequired\n}\n\nconst messageTypes = {\n  messageStyle: PropTypes.object,\n  messageClassName: PropTypes.string\n}\n\nexport default {\n  ...styleTypes,\n  ...classNameTypes,\n  ...optionTypes,\n  ...labelTypes,\n  ...commandTypes,\n  ...messageTypes\n}\n","/* eslint-disable */\nimport React, { Component } from 'react'\nimport defaults from 'defaults'\nimport isEqual from 'react-fast-compare'\n\n// Components\nimport TerminalMessage from './TerminalMessage'\n\n// Handlers\nimport validateCommands from './handlers/validateCommands'\nimport scrollHistory from './handlers/scrollHistory'\nimport parseEOL from './handlers/parseEOL'\n\n// Definitions\nimport sourceStyles from './defs/styles/Terminal'\nimport types from './defs/types/Terminal'\n\n// Utils\nimport commandExists from './utils/commandExists'\n\nexport default class Terminal extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      stdout: [],\n      history: [],\n      historyPosition: null,\n      previousHistoryPosition: null,\n      // TODO: Add prop-controlled enable/disable on the input\n      processing: false\n    }\n\n    this.terminalRoot = React.createRef()\n    this.terminalInput = React.createRef()\n  }\n\n  static propTypes = types\n\n  /* istanbul ignore next: Covered by interactivity tests */\n  focusTerminal = () => {\n    // Only focus the terminal if text isn't being copied\n    const isTextSelected = window.getSelection().type === 'Range'\n    if (!isTextSelected) this.terminalInput.current.focus()\n  }\n\n  /* istanbul ignore next: Covered by interactivity tests */\n  scrollToBottom = () => {\n    const rootNode = this.terminalRoot.current\n\n    // This may look ridiculous, but it is necessary to decouple execution for just a millisecond in order to scroll all the way\n    setTimeout(() => { rootNode.scrollTop = rootNode.scrollHeight }, 1)\n  }\n\n  showWelcomeMessage = () => {\n    const msg = this.props.welcomeMessage\n    this.pushToStdout(msg)\n  }\n\n  /**\n   * @param {String} message\n   * @param {Object} options {\n   *  rawInput: Raw input from the terminal (For history),\n   *  isEcho: For distinguishing echo messages (Exemption from message styling)\n   * }\n   */\n  pushToStdout = (message, options) => {\n    const { stdout } = this.state\n    stdout.push({ message, isEcho: options?.isEcho || false })\n\n    /* istanbul ignore next: Covered by interactivity tests */\n    if (options?.rawInput) this.pushToHistory(options.rawInput)\n    this.setState({ stdout: stdout })\n  }\n\n  /**\n   * @param {String} rawInput Raw command input from the terminal\n   */\n  /* istanbul ignore next: Covered by interactivity tests */\n  pushToHistory = rawInput => {\n    const { history } = this.state\n    history.push(rawInput)\n    this.setState({ history: history, historyPosition: null })\n  }\n\n  getStdout = () => {\n    // Parse EOL if it isn't disabled\n    const stdout = !this.props.noNewlineParsing ? parseEOL(this.state.stdout) : this.state.stdout\n\n    return stdout.map((line, i) => {\n      return <TerminalMessage\n        key={i}\n        content={line.message}\n        dangerMode={this.props.dangerMode}\n        className={!line.isEcho ? this.props.messageClassName : /* istanbul ignore next: Covered by interactivity tests */ undefined}\n        style={!line.isEcho ? this.props.messageStyle : /* istanbul ignore next: Covered by interactivity tests */ undefined}\n      />\n    })\n  }\n\n  /* istanbul ignore next: Covered by interactivity tests */\n  clearStdout = () => {\n    this.setState({ stdout: [] })\n  }\n\n  /* istanbul ignore next: Covered by interactivity tests */\n  clearInput = () => {\n    this.setState({ historyPosition: null })\n    this.terminalInput.current.value = ''\n  }\n\n  /* istanbul ignore next: Covered by interactivity tests */\n  processCommand = () => {\n    this.setState({ processing: true }, () => {\n      // Initialise command result object\n      const rawInput = this.terminalInput.current.value\n\n      if (!this.props.noHistory) this.pushToHistory(rawInput)\n\n      if (!this.props.noEchoBack) {\n        // Mimic native terminal by echoing command back\n        // Also exempt it from message since it should not really be a message despite behaving like one\n        // Containing it in a span to allow JSX values in the prompt label\n        const echo = <span>{this.props.promptLabel || '$'} {rawInput}</span>\n        this.pushToStdout(echo, { isEcho: true })\n      }\n\n      if (rawInput) {\n        const res = this.props.runCommand(rawInput);\n        if (res)\n          this.pushToStdout(res);\n      }\n\n      this.setState({ processing: false }, () => {\n        this.clearInput()\n        if (!this.props.noAutoScroll) this.scrollToBottom()\n      })\n    })\n  }\n\n  /* istanbul ignore next: Covered by interactivity tests */\n  scrollHistory = direction => {\n    const { history, historyPosition, previousHistoryPosition } = this.state\n\n    const toUpdate = scrollHistory(direction, {\n      history,\n      historyPosition,\n      previousHistoryPosition,\n      terminalInput: this.terminalInput\n    })\n\n    // Only update if there is something to update\n    if (toUpdate) this.setState(toUpdate)\n  }\n\n  /* istanbul ignore next: Covered by interactivity tests */\n  handleInput = event => {\n    switch (event.key) {\n      case 'Enter': this.processCommand(); break\n      case 'ArrowUp': this.scrollHistory('up'); break\n      case 'ArrowDown': this.scrollHistory('down'); break\n      default:\n        // Ctrl + L\n        if (event.ctrlKey && event.keyCode === 76) {\n          this.clearStdout();\n          event.preventDefault();\n        }\n    }\n  }\n\n  // componentDidUpdate (prevProps) {\n    // If there was a change in commands, re-validate\n    // if (!isEqual(prevProps.commands, this.props.commands)) this.validateCommands()\n  // }\n\n  componentDidMount () {\n    // this.validateCommands()\n    if (this.props.welcomeMessage) this.showWelcomeMessage()\n    /* istanbul ignore next: Covered by interactivity tests */\n    if (this.props.autoFocus) this.focusTerminal()\n  }\n\n  render () {\n    const styles = {\n      container: defaults(this.props.style, sourceStyles.container),\n      content: defaults(this.props.contentStyle, sourceStyles.content),\n      inputArea: defaults(this.props.inputAreaStyle, sourceStyles.inputArea),\n      promptLabel: defaults(this.props.promptLabelStyle, sourceStyles.promptLabel),\n      input: defaults(this.props.inputStyle, sourceStyles.input)\n    }\n\n    return (\n      <div\n        ref={this.terminalRoot}\n        name='react-console-emulator'\n        className={this.props.className}\n        style={styles.container}\n        onClick={this.focusTerminal}\n      >\n        {/* Content */}\n        <div\n          name='react-console-emulator__content'\n          className={this.props.contentClassName}\n          style={styles.content}\n        >\n          {/* Stdout */}\n          {this.getStdout()}\n          {/* Input area */}\n          <div\n            name='react-console-emulator__inputArea'\n            className={this.props.inputAreaClassName}\n            style={styles.inputArea}\n          >\n            {/* Prompt label */}\n            <span\n              name='react-console-emulator__promptLabel'\n              className={this.props.promptLabelClassName}\n              style={styles.promptLabel}\n            >\n              {this.props.promptLabel || '$'}\n            </span>\n            {/* Input */}\n            <input\n              ref={this.terminalInput}\n              name='react-console-emulator__input'\n              className={this.props.inputClassName}\n              style={styles.input}\n              onKeyDown={this.handleInput}\n              type='text'\n              autoComplete='off'\n              disabled={\n                this.props.disabled ||\n                (this.props.disableOnProcess && /* istanbul ignore next: Covered by interactivity tests */ this.state.processing)\n              }\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import innerText from 'react-innertext'\n\nexport default stdout => {\n  const parsedStdout = []\n\n  for (let i = 0; i < stdout.length; i++) {\n    const currentLine = stdout[i]\n    const { message, isEcho } = currentLine\n\n    const messageText = innerText(message)\n\n    // Do not parse echoes (Raw inputs)\n    const parsed = !isEcho && /\\\\n/g.test(messageText) ? messageText.split(/\\\\n/g) : [messageText]\n\n    for (const line of parsed) {\n      parsedStdout.push({ message: line, isEcho: currentLine.isEcho })\n    }\n  }\n\n  return parsedStdout\n}\n","import React from 'react';\n\nexport default React.createContext({\n  eval: str => console.log(`Unable to eval(\"${str}\"): Interpreter context not initialized`),\n  reset: str => console.log(`Unable to reset(\"${str}\"): Interpreter context not initialized`),\n  name: '<unnamed>'\n});\n\n","\nimport React from 'react';\n// import PropTypes from 'prop-types';\nimport Terminal from '../react-console-emulator/Terminal';\nimport InterpContext from '../contexts/Interpreter';\n\nconst Repl = React.forwardRef((_, ref) => {\n  const interp = React.useContext(InterpContext);\n  const welcomeMessage = `Welcome to ${interp.name}! Use Ctrl+L to clear the terminal.`;\n  return (\n    <Terminal\n      welcomeMessage={welcomeMessage}\n      promptLabel=\">\"\n      autoFocus={true}\n      noDefaults={true}\n      runCommand={interp.eval}\n      noNewlineParsing={true}\n      ref={ref}\n    />\n  );\n});\n\nRepl.propTypes = {\n};\n\nexport default Repl;\n\n","/* eslint-disable */\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Author: Koh Zi Han, based on implementation by Koh Zi Chun\n */\n\nimport CodeMirror from 'codemirror';\n\nCodeMirror.defineMode(\"scheme\", function () {\n    var BUILTIN = \"builtin\", COMMENT = \"comment\", STRING = \"string\",\n        ATOM = \"atom\", NUMBER = \"number\", BRACKET = \"bracket\";\n    var INDENT_WORD_SKIP = 2;\n\n    function makeKeywords(str) {\n        var obj = {}, words = str.split(\" \");\n        for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n        return obj;\n    }\n\n  // TODO: customize for uscheme keywords\n    var keywords = makeKeywords(\"λ case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?\");\n    var indentKeys = makeKeywords(\"define let letrec let* lambda\");\n\n    function stateStack(indent, type, prev) { // represents a state stack object\n        this.indent = indent;\n        this.type = type;\n        this.prev = prev;\n    }\n\n    function pushStack(state, indent, type) {\n        state.indentStack = new stateStack(indent, type, state.indentStack);\n    }\n\n    function popStack(state) {\n        state.indentStack = state.indentStack.prev;\n    }\n\n    var binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\\/[01]+#*)?i|[-+]?[01]+#*(?:\\/[01]+#*)?@[-+]?[01]+#*(?:\\/[01]+#*)?|[-+]?[01]+#*(?:\\/[01]+#*)?[-+](?:[01]+#*(?:\\/[01]+#*)?)?i|[-+]?[01]+#*(?:\\/[01]+#*)?)(?=[()\\s;\"]|$)/i);\n    var octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?)(?=[()\\s;\"]|$)/i);\n    var hexMatcher = new RegExp(/^(?:[-+]i|[-+][\\da-f]+#*(?:\\/[\\da-f]+#*)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?@[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?[-+](?:[\\da-f]+#*(?:\\/[\\da-f]+#*)?)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?)(?=[()\\s;\"]|$)/i);\n    var decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)i|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)@[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)?i|(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*))(?=[()\\s;\"]|$)/i);\n\n    function isBinaryNumber (stream) {\n        return stream.match(binaryMatcher);\n    }\n\n    function isOctalNumber (stream) {\n        return stream.match(octalMatcher);\n    }\n\n    function isDecimalNumber (stream, backup) {\n        if (backup === true) {\n            stream.backUp(1);\n        }\n        return stream.match(decimalMatcher);\n    }\n\n    function isHexNumber (stream) {\n        return stream.match(hexMatcher);\n    }\n\n    return {\n        startState: function () {\n            return {\n                indentStack: null,\n                indentation: 0,\n                mode: false,\n                sExprComment: false,\n                sExprQuote: false\n            };\n        },\n\n        token: function (stream, state) {\n            if (state.indentStack === null && stream.sol()) {\n                // update indentation, but only if indentStack is empty\n                state.indentation = stream.indentation();\n            }\n\n            // skip spaces\n            if (stream.eatSpace()) {\n                return null;\n            }\n            var returnType = null;\n\n            switch(state.mode){\n                case \"string\": // multi-line string parsing mode\n                    var next, escaped = false;\n                    while ((next = stream.next()) != null) {\n                        if (next === \"\\\"\" && !escaped) {\n\n                            state.mode = false;\n                            break;\n                        }\n                        escaped = !escaped && next === \"\\\\\";\n                    }\n                    returnType = STRING; // continue on in scheme-string mode\n                    break;\n                case \"comment\": // comment parsing mode\n                    var maybeEnd = false;\n                    while ((next = stream.next()) != null) {\n                        if (next === \"#\" && maybeEnd) {\n\n                            state.mode = false;\n                            break;\n                        }\n                        maybeEnd = (next === \"|\");\n                    }\n                    returnType = COMMENT;\n                    break;\n                case \"s-expr-comment\": // s-expr commenting mode\n                    state.mode = false;\n                    if(stream.peek() === \"(\" || stream.peek() === \"[\"){\n                        // actually start scheme s-expr commenting mode\n                        state.sExprComment = 0;\n                    }else{\n                        // if not we just comment the entire of the next token\n                        stream.eatWhile(/[^\\s\\(\\)\\[\\]]/); // eat symbol atom\n                        returnType = COMMENT;\n                        break;\n                    }\n                default: // default parsing mode\n                    var ch = stream.next();\n\n                    if (ch === \"\\\"\") {\n                        state.mode = \"string\";\n                        returnType = STRING;\n\n                    } else if (ch === \"'\") {\n                        if (stream.peek() === \"(\" || stream.peek() === \"[\"){\n                            if (typeof state.sExprQuote != \"number\") {\n                                state.sExprQuote = 0;\n                            } // else already in a quoted expression\n                            returnType = ATOM;\n                        } else {\n                            stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n                            returnType = ATOM;\n                        }\n                    } else if (ch === '#') {\n                        if (stream.eat(\"|\")) {                    // Multi-line comment\n                            state.mode = \"comment\"; // toggle to comment mode\n                            returnType = COMMENT;\n                        } else if (stream.eat(/[tf]/i)) {            // #t/#f (atom)\n                            returnType = ATOM;\n                        } else if (stream.eat(';')) {                // S-Expr comment\n                            state.mode = \"s-expr-comment\";\n                            returnType = COMMENT;\n                        } else {\n                            var numTest = null, hasExactness = false, hasRadix = true;\n                            if (stream.eat(/[ei]/i)) {\n                                hasExactness = true;\n                            } else {\n                                stream.backUp(1);       // must be radix specifier\n                            }\n                            if (stream.match(/^#b/i)) {\n                                numTest = isBinaryNumber;\n                            } else if (stream.match(/^#o/i)) {\n                                numTest = isOctalNumber;\n                            } else if (stream.match(/^#x/i)) {\n                                numTest = isHexNumber;\n                            } else if (stream.match(/^#d/i)) {\n                                numTest = isDecimalNumber;\n                            } else if (stream.match(/^[-+0-9.]/, false)) {\n                                hasRadix = false;\n                                numTest = isDecimalNumber;\n                            // re-consume the intial # if all matches failed\n                            } else if (!hasExactness) {\n                                stream.eat('#');\n                            }\n                            if (numTest != null) {\n                                if (hasRadix && !hasExactness) {\n                                    // consume optional exactness after radix\n                                    stream.match(/^#[ei]/i);\n                                }\n                                if (numTest(stream))\n                                    returnType = NUMBER;\n                            }\n                        }\n                    } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) { // match non-prefixed number, must be decimal\n                        returnType = NUMBER;\n                    } else if (ch === \";\") { // comment\n                        stream.skipToEnd(); // rest of the line is a comment\n                        returnType = COMMENT;\n                    } else if (ch === \"(\" || ch === \"[\") {\n                      var keyWord = ''; var indentTemp = stream.column(), letter;\n                        /**\n                        Either\n                        (indent-word ..\n                        (non-indent-word ..\n                        (;something else, bracket, etc.\n                        */\n\n                        while ((letter = stream.eat(/[^\\s\\(\\[\\;\\)\\]]/)) != null) {\n                            keyWord += letter;\n                        }\n\n                        if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) { // indent-word\n\n                            pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);\n                        } else { // non-indent word\n                            // we continue eating the spaces\n                            stream.eatSpace();\n                            if (stream.eol() || stream.peek() === \";\") {\n                                // nothing significant after\n                                // we restart indentation 1 space after\n                                pushStack(state, indentTemp + 1, ch);\n                            } else {\n                                pushStack(state, indentTemp + stream.current().length, ch); // else we match\n                            }\n                        }\n                        stream.backUp(stream.current().length - 1); // undo all the eating\n\n                        if(typeof state.sExprComment === \"number\") state.sExprComment++;\n                        if(typeof state.sExprQuote === \"number\") state.sExprQuote++;\n\n                        returnType = BRACKET;\n                    } else if (ch === \")\" || ch === \"]\") {\n                        returnType = BRACKET;\n                        if (state.indentStack != null && state.indentStack.type === (ch === \")\" ? \"(\" : \"[\")) {\n                            popStack(state);\n\n                            if(typeof state.sExprComment === \"number\"){\n                                if(--state.sExprComment === 0){\n                                    returnType = COMMENT; // final closing bracket\n                                    state.sExprComment = false; // turn off s-expr commenting mode\n                                }\n                            }\n                            if(typeof state.sExprQuote === \"number\"){\n                                if(--state.sExprQuote === 0){\n                                    returnType = ATOM; // final closing bracket\n                                    state.sExprQuote = false; // turn off s-expr quote mode\n                                }\n                            }\n                        }\n                    } else {\n                        stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n\n                        if (keywords && keywords.propertyIsEnumerable(stream.current())) {\n                            returnType = BUILTIN;\n                        } else returnType = \"variable\";\n                    }\n            }\n            return (typeof state.sExprComment === \"number\") ? COMMENT : ((typeof state.sExprQuote === \"number\") ? ATOM : returnType);\n        },\n\n        indent: function (state) {\n            if (state.indentStack === null) return state.indentation;\n            return state.indentStack.indent;\n        },\n\n        closeBrackets: {pairs: \"()[]{}\\\"\\\"\"},\n        lineComment: \";;\"\n    };\n});\n\n","\nimport React from 'react';\n// import PropTypes from 'prop-types';\n// import InterpContext from '../contexts/Interpreter';\nimport { Controlled as CodeMirror } from 'react-codemirror2';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/gruvbox-dark.css';\nimport 'codemirror/addon/edit/matchbrackets';\nimport 'codemirror/addon/edit/closebrackets';\nimport 'codemirror/addon/comment/comment';\nimport './uscheme-mode';\n// import 'codemirror/mode/scheme/scheme';\n\nconst Editor = ({ valRef }) => {\n  const [value, setValue] = React.useState(';; Enter code here!\\n\\n');\n  React.useEffect(() => {\n    valRef.current = value;\n  }, [valRef, value]);\n  const [instance, setInstance] = React.useState(null);\n  React.useEffect(() => {\n    const keyMap = { 'Ctrl-/': cm => cm.toggleComment() };\n    if (instance) {\n      instance.addKeyMap(keyMap);\n    }\n  }, [instance]);\n  const onBeforeChange = (editor, data, value) => {\n    setValue(value);\n  };\n  const opts = {\n    mode: 'uscheme',\n    theme: 'gruvbox-dark',\n    smartIndent: true,\n    lineNumbers: true,\n    matchBrackets: true,\n    autoCloseBrackets: '()[]{}',\n  };\n  return (\n    <CodeMirror\n      value={value}\n      onBeforeChange={onBeforeChange}\n      options={opts}\n      editorDidMount={editor => setInstance(editor)}\n    />\n  );\n};\n\nexport default Editor;\n\n","\nimport React from 'react';\nimport { Nav, Navbar, Container, Row, Col } from 'react-bootstrap';\nimport Repl from './components/Repl';\nimport Editor from './components/Editor';\nimport InterpContext from './contexts/Interpreter';\n\nexport default () => {\n  const [interpEval, setInterpEval] = React.useState(window.uscheme.make_interp);\n  const replRef = React.useRef();\n  const editorRef = React.useRef('');\n  const interp = {\n    eval: str => {\n      const res = interpEval(str);\n      res.split('\\n').forEach(line => replRef.current.pushToStdout(line));\n    },\n    reset: str => {\n      const newEval = window.uscheme.make_interp();\n      setInterpEval(() => newEval);\n      const res = newEval(str);\n      res.split('\\n').forEach(line => replRef.current.pushToStdout(line));\n    },\n    name: 'uscheme'\n  };\n  const run = () => {\n    interp.reset(editorRef.current);\n  }\n  return (\n    <React.Fragment>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand>Comp 105</Navbar.Brand>\n        <Nav>\n          <Container>\n            <Nav.Link className=\"bg-success\" href=\"#\" onSelect={run}>Run</Nav.Link>\n          </Container>\n        </Nav>\n      </Navbar>\n      <Container>\n        <InterpContext.Provider value={interp}>\n          <Row>\n            <Col>\n              <Editor valRef={editorRef} />\n            </Col>\n            <Col>\n              <Repl ref={replRef} />\n            </Col>\n          </Row>\n        </InterpContext.Provider>\n    </Container>\n    </React.Fragment>\n  );\n};\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}